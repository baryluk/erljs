% TODO: handle white spaces inside parameters, or ignore in get_next in JS

	example:sum1(333).
	example:sum2(333,1000000).
	example:ntka(333,1000000).
	example:tailowa(1000000).
	example:nietailowa(1000000).
	example:konwencje1('dupa','blada','masie').
	example:konwencje2('dupa','blada','masie').
	example:konwencje3('dupa','blada','masie').
	example:konwencje4('dupa','blada','masie').
	example:matche({1,1}).
	example:matche(aaa).
	%example:matche({aaa}).
	%example:matche('a'). // throws exp
	example:silnia(20).
	example:llll(20).

	lists:seq(10,30,2).
	example:llll2(10).
	example:llll3(10,14).
	example:llll_z(33).
	example:llll_u(33).

	example:fib1(12).
	example:fib2(12).
	example:fib3(12).
	example:fib2(60).
	example:fib3(60).

	example:dd1(10,20,30,40).
	example:dd2(10,20).
	example:dd3(10,20,30,40).
	example:dd4().
	example:dd5().
	example:dd6().
	example:dd7().
	example:dd8(10,200).
	example:dd9(30).
	example:dd10(30).
	example:dd11(30).
	example:dd12(30).
	example:dd13(11,30).
	example:dd14(11,30).


	%example:jss(20). % client side only
	%example:jss2(33).
	%example:jss3([23,ab,{34,55}]).

% TODO: tests expection handling of improper lists and bad or incorrect arguments

% lists

lists:seq(10,20).
lists:seq(10,20000).
lists:seq(10,9).
lists:seq(10,10).
%lists:seq(10,8).  % bad func
lists:seq(10,50,2).
lists:seq(20,6,-2).
lists:duplicate(200,10).
lists:duplicate(200,97).
lists:duplicate(2000,{a}).
lists:duplicate(2000,a).
lists:seq(10,200,2).
lists:seq(200,100,-2).
erlang:'++'([1,23,1,23,12],[12,3,12,31,2]).
erlang:'++'([1,23,1,23,12],[]).
erlang:'++'([],[1,23,12,3123]).
erlang:'++'([],[]).
erlang:'++'([1],[1,23,12,3123]).
erlang:'++'([1],[1,23,12|3123]).
erlang:'++'([],[1,23,12|3123]).
erlang:'++'([41,2,312,3],[1,23,12|3123]).

lists:reverse([6|[1|[0|[]]]]).
lists:reverse([6|[1|[0]]]).
lists:reverse([6,1|[0]]).
lists:reverse([6,1,2,7,1,9,1,2,9,21,3,8,1,4,8,1,3,78,9,0]).
lists:reverse([1]).
lists:reverse([1,6]).
lists:reverse([1,5]).
lists:reverse([[5],5]).
lists:reverse([[5],[6],1]).
lists:reverse([[5],[6],[1]]).
lists:reverse([],[123,12,21]).
lists:reverse([],[]).
lists:reverse([12,3,123,15,19],[6,8,912,13,21]).
lists:reverse([12,3,123,15,19],[6,1,2,7,1,9|0]).
lists:reverse([19],[6,1,2,7,1,9|0]).
lists:reverse([],[6,1,2,7,1,9|0]).

erlang:length([]).
erlang:length([1]).
erlang:length([1,6]).
erlang:length([[1],6]).
erlang:length([[1],6]).
erlang:length([4|[1]]).
erlang:length([4|[1|[]]]).

erlang:hd([3,4,5]).
erlang:hd([3,4|5]).
erlang:hd([3]).
erlang:hd([3,5]).
erlang:hd([3|5]).
erlang:tl([3,4,5]).
erlang:tl([3,4|5]).
erlang:tl([3]).
erlang:tl([3,5]).
erlang:tl([3|5]).

lists:nth(4,[1,2,3,5,7,8,9,0]).
lists:nth(8,[a,b,c,d,e,f,g,h,i,j,k,l]).
lists:nth(8,[a,b,c,d,e,f,g,h,i,j,k,l|m]).
lists:nth(1,[a]).
lists:nth(1,[a,b]).

lists:nthtail(4,[1,2,3,5,7,8,9,0]).
lists:nthtail(8,[a,b,c,d,e,f,g,h,i,j,k,l]).
lists:nthtail(8,[a,b,c,d,e,f,g,h,i,j,k,l|m]).
lists:nthtail(1,[a]).
lists:nthtail(1,[a,b]).

% math
math:sin(1.0).
math:sin(3.14).
math:sin(-34.14).
math:sin(0).
math:sin(0.0).
math:sin(0.01).

% proplists
proplists:lookup(ala,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:lookup(kasia,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:lookup(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:delete(ala,[{ala,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:delete(kasia,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:delete(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_value(ala,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_value(kasia,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_value(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_value(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}],something).
proplists:is_defined(ala,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:is_defined(kasia,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:is_defined(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_keys([{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
% TODO:  more tests

% more lists
lists:max([2]).
lists:min([2]).
lists:max([2,4]).
lists:min([2,4]).
lists:max([2,4,7]).
lists:min([2,4,7]).
lists:max([2,4,1]).
lists:min([2,4,1]).
lists:max([2,4,1,7]).
lists:min([2,4,1,7]).
lists:max([9,4,1,7]).
lists:min([9,4,1,7]).
lists:sum([]).
lists:last([8]).
lists:last([9,2]).
lists:last([a,b,c]).
lists:zip([],[]).
lists:zip([1],[a]).
lists:zip([a,b,d],[a,b,c]).
lists:zip([a,b,d],[4,6,7]).
lists:zip3([],[],[]).
lists:zip3([a],[5],[{z,p}]).
lists:zip3([a,7],[5,a8],[{z,p},{-5,f}]).
lists:unzip([]).
lists:unzip3([]).
lists:sort([]).
lists:sort([1,7,1,8,9,12,8,9,23,4]).
lists:sort([3]).
lists:sort([3,5]).
lists:sort([5,3]).
lists:sort([3,3]).
lists:sort([3,3,1]).
lists:sort([3,1,3]).
lists:sort([1,3,3]).
lists:sort([1,3,3,6,1,2,3,1,56,12,62,3423,4,7,213,24,6,7,2,4,7,8,65,3,5,6,89,8765,43,23,12,4,1,4,3,2,2,4,5,6,7,5,4,3,5,65,6,7,4,3,2,4,65,7,9,0,9,7,5,3,2,12,4]).

gb_trees:empty().
begin T=gb_trees:empty(), gb_trees:enter(ala,123, T) end.

