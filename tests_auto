	example:sum1(333).
	example:sum2(333,1000000).
	example:ntka(333,1000000).
	example:ntka(10,[13,11]).
	example:ntka(10, [97,115,100,2,97,115,100]).
	example:ntka(10, [97,115,100,97,115,100]).
	example:ntka(10, [97,115,100,44,97,115,100]).
	example:ntka(10, [97,115,100,8,9,10,11,12,13,14,15,16,26,27,28,97,115,100]).
	example:ntka(10, [97,115,100,8,9,10,11,12,13,27,97,115,100]).
	example:ntka(10,"ala\\ma\\kota").
	example:ntka(10,"ala\b\t\n\r\v\f\\\"ma").
	example:ntka(10,"ala\ema").
	example:ntka(10,"ala\wma").
%	example:ntka(10,"ala\x00ma").
%	example:ntka(10,"ala\x61ma").
%	example:ntka(10,"ala\xafma").
%	example:ntka(10,"ala\xffma").
%	example:ntka(10,"ala\xfcma").
%	example:ntka(10,"ala\xfc\x65ma").
%	example:ntka(10,"ala\xfc\023ma").
%	example:ntka(10,"ala\xfc\03ma").
%	example:ntka(10,"ala\xfc\43ma").
%	example:ntka(10,"ala\xfc\44\044ma").
%	example:ntka(10,"ala\xfc\44\044ma").
	example:ntka(10,"ala\nma\tkota\r\\a kot \w\f\g\a\ma ale \e\f\v\b\b\b\b").
	example:ntka(10,"ala\nma\tkota\r\\\"a kot \w\f\g\a\ma ale \e\f\v\b\b\b\b").
	example:tailowa(1000000).
	example:nietailowa(1000000).
	example:konwencje1('dupa','blada','masie').
	example:konwencje2('dupa','blada','masie').
	example:konwencje3('dupa','blada','masie').
	example:konwencje4('dupa','blada','masie').
	example:matche({1,1}).
	example:matche(aaa).
	begin catch example:matche({aaa}) end.
	begin catch example:matche('a') end.
	example:silnia(20).
	example:llll(20).

	lists:seq(10,30,2).
	example:llll2(10).
	example:llll3(10,14).
	example:llll_z(33).
	example:llll_u(33).

	example:fib1(12).
	example:fib2(12).
	example:fib3(12).
	example:fib2(60).
	example:fib3(60).

	example:dd1(10,20,30,40).
	example:dd2(10,20).
	example:dd3(10,20,30,40).
	example:dd4().
	example:dd5().
	example:dd6().
	example:dd7().
	example:dd8(10,200).
	example:dd9(30).
	example:dd10(30).
	example:dd11(30).
	example:dd12(30).
	example:dd13(11,30).
	example:dd14(11,30).


	%example:jss(20). % client side only
	%example:jss2(33).
	%example:jss3([23,ab,{34,55}]).

begin A=(0.4+9.99+3.14), B=A-13.5, C=A-13.53, {A,B,C} end.

catch example:eh1([9,66,12]).
catch example:eh2([9,66,12]).
catch example:eh2b([9,66,12]).
example:eh3([9,66,12]).
example:eh4([9,66,12]).
example:eh5([9,66,12]).
example:eh6([9,66,12]).
example:eh7([9,66,12]).

catch example:eh1(a).
catch example:eh2(a).
example:eh3(a).
example:eh4(a).
example:eh5(a).
example:eh6(a).

example:eh7(a).
example:eh7c([9,66,12]).
catch example:eh7c(a).
catch example:eh7b(a).
example:eh7b([9,66,12]).
catch example:eh7b([9,66,12]).
example:eh7b2([9,66,12],[6,7,8]).
catch example:eh7b2([9,66,12],xyz).
catch example:eh7b2(abc,xyz).
example:eh7b2(abc,[6,7,8]).
catch example:eh7b2(abc,[6,7,8]).

example:eh8([9,66,12],[6,7,8]).
catch example:eh8([9,66,12],xyz).
catch example:eh8([1,2,3],[6,7,8]).
catch example:eh8([1,2,3],xyz).
catch example:eh8(abc,xyz).
catch example:eh8(abc,[6,7,8]).
catch example:eh8(abc,[6,7,8]).


example:eh9([9,66,12],[6,7,8]).
catch example:eh9([9,66,12],xyz).
example:eh9([1,2,3],[6,7,8]).
catch example:eh9([1,2,3],xyz).
catch example:eh9(abc,xyz).
example:eh9(abc,[6,7,8]).
catch example:eh9(abc,[6,7,8]).


example:eh10([9,66,12],[6,7,8]).
catch example:eh10([9,66,12],[6,7,8]).
catch example:eh10([9,66,12],xyz).
catch example:eh10(abc,[6,7,8]).
catch example:eh10(abc,[6,7,8]).
catch example:eh10(abc,xyz).



% TODO: tests expection handling of improper lists and bad or incorrect arguments

% lists

lists:seq(1,11).
lists:seq(300,400).
lists:seq(4,3).
lists:seq(4,4).
begin catch lists:seq(10,8) end.
lists:seq(2,50,2).
lists:seq(20,2,-2).
lists:duplicate(9,4).
lists:duplicate(9,97).
lists:duplicate(80,{a}).
lists:duplicate(80,a).
lists:seq(10,200,2).
lists:seq(50,-50,-3).
begin catch lists:seq(1,14,0.137) end.
begin catch lists:seq(54,43,-0.461) end.
erlang:'++'([1,23,1,23,12],[12,3,12,31,2]).
erlang:'++'([1,23,1,23,12],[]).
erlang:'++'([],[1,23,12,3123]).
erlang:'++'([],[]).
erlang:'++'([1],[1,23,12,3123]).
erlang:'++'([1],[1,23,12|3123]).
erlang:'++'([],[1,23,12|3123]).
erlang:'++'([41,2,312,3],[1,23,12|3123]).

% printable ASCII
lists:seq(32,126).


lists:reverse([6|[1|[0|[]]]]).
lists:reverse([6|[1|[0]]]).
lists:reverse([6,1|[0]]).
lists:reverse([6,1,2,7,1,9,1,2,9,21,3,8,1,4,8,1,3,78,9,0]).
lists:reverse([1]).
lists:reverse([1,6]).
lists:reverse([1,5]).
lists:reverse([[5],5]).
lists:reverse([[5],[6],1]).
lists:reverse([[5],[6],[1]]).
lists:reverse([],[123,12,21]).
lists:reverse([],[]).
lists:reverse([12,3,123,15,19],[6,8,912,13,21]).
lists:reverse([12,3,123,15,19],[6,1,2,7,1,9|0]).
lists:reverse([19],[6,1,2,7,1,9|0]).
lists:reverse([],[6,1,2,7,1,9|0]).
lists:reverse("").
lists:reverse("a").
lists:reverse("ab").
lists:reverse("abc").
lists:reverse([88|"abc"]).
lists:reverse([88,77|"abc"]).
lists:reverse([88,77|""]).
lists:reverse([88,77|"f"]).
lists:reverse([88|""]).
lists:reverse("","xyz").
lists:reverse("a","xyz").
lists:reverse("ab","xyz").
lists:reverse("abc","xyz").
lists:reverse([88|"abc"],"xyz").
lists:reverse([88,77|"abc"],"xyz").
lists:reverse([88,77|""],"xyz").
lists:reverse([88,77|"f"],"xyz").
lists:reverse([88|""],"xyz").


erlang:length([]).
erlang:length([1]).
erlang:length([1,6]).
erlang:length([[1],6]).
erlang:length([[1],6]).
erlang:length([4|[1]]).
erlang:length([4|[1|[]]]).
erlang:length("").
erlang:length("a").
erlang:length("ab").
erlang:length("abc").
erlang:length([88|"abc"]).
erlang:length([88,77|"abc"]).
erlang:length([88,77|""]).
erlang:length([88,77|"f"]).
erlang:length([88|""]).

erlang:hd([3,4,5]).
erlang:hd([3,4|5]).
erlang:hd([3]).
erlang:hd([3,5]).
erlang:hd([3|5]).
erlang:tl([3,4,5]).
erlang:tl([3,4|5]).
erlang:tl([3]).
erlang:tl([3,5]).
erlang:tl([3|5]).

catch erlang:hd([]).
catch erlang:tl([]).
% erlc is smart, and emits erlang:error/1 call for above on compile time. will try to prevent this:
begin F=fun(X) -> erlang:hd(X) end, catch F([]) end.
begin F=fun(X) -> erlang:tl(X) end, catch F([]) end.

catch erlang:hd("").
erlang:hd("a").
erlang:hd("ab").
erlang:hd("abc").
erlang:hd([88|"abc"]).
erlang:hd([88,77|"abc"]).
erlang:hd([88,77|""]).
erlang:hd([88,77|"f"]).
erlang:hd([88|""]).
catch erlang:tl("").
erlang:tl("a").
erlang:tl("ab").
erlang:tl("abc").
erlang:tl([88|"abc"]).
erlang:tl([88,77|"abc"]).
erlang:tl([88,77|""]).
erlang:tl([88,77|"f"]).
erlang:tl([88|""]).

catch lists:nth(1,[]).
catch lists:nth(1,"").
lists:nth(4,[1,2,3,5,7,8,9,0]).
catch lists:nth(100,[1,2,3,5,7,8,9,0]).
catch lists:nth(-100,[1,2,3,5,7,8,9,0]).
lists:nth(8,[a,b,c,d,e,f,g,h,i,j,k,l]).
lists:nth(8,[a,b,c,d,e,f,g,h,i,j,k,l|m]).
lists:nth(1,[a]).
lists:nth(1,[a,b]).
lists:nth(8,"ala ma duzo kotow").
lists:nth(8,[a,l,a|"ma duzo kotow"]).
catch lists:nth(100,"ala ma duzo kotow").
catch lists:nth(100,[a,l,a|"ma duzo kotow"]).

lists:nthtail(4,[1,2,3,5,7,8,9,0]).
lists:nthtail(8,[a,b,c,d,e,f,g,h,i,j,k,l]).
lists:nthtail(8,[a,b,c,d,e,f,g,h,i,j,k,l|m]).
lists:nthtail(1,[a]).
lists:nthtail(1,[a,b]).

lists:flatten([]).
lists:flatten([1]).
lists:flatten([1,5]).
lists:flatten([1,[5,7]]).
lists:flatten([1,[[5,2],3]]).
lists:flatten([[1,4],[5,2]]).
lists:flatten([[1,4],[[5,2],3]]).
lists:flatten([1,[b,v,[7,a,6],[7,5,[1,[4]],6,7],[2,5,1],[4,[6,5]]],[4,[4,5]],3,[4,5]]).
lists:flatlength([1,[b,v,[7,a,6],[7,5,[1,[4]],6,7],[2,5,1],[4,[6,5]]],[4,[4,5]],3,[4,5]]).
lists:flatlength([]).
lists:flatlength([3,4]).
lists:flatlength([3,[4,5]]).
lists:flatlength([[3,1],[4,5]]).

% begining of some examples from manual

lists:append([], []).
lists:append([1, 2, 3], []).
lists:append([1, 2, 3], [a, b,c]).
lists:append([1, 2, 3], [a, b|c]).
lists:append([], [a, b,c]).
lists:append([], [a, b|c]).
lists:append([4], [a, b,c]).
lists:append([4], [a, b|c]).
lists:append([40,41,42],[51,52,53]).
lists:append([[1, 2, 3], [a, b], [4, 5, 6]]).
lists:append("abc", "def").
lists:append("abc", "").
lists:append("", "").
lists:append("", "def").
lists:append("", "d").
lists:append("a", "").
lists:append("a", "d").
lists:append("a", [a,b,c]).
lists:append("a", [a,b|c]).
lists:append("", [a,b|c]).
lists:append([], "def").
lists:append([4], "d").
lists:append([4], "").
lists:append([4], "def").
lists:append([66|"ad"]," cat").
lists:append([66|"ad"],[" dog and"|" cat"]).
lists:append([66|["ad"|[108|"y "]]],["dog and"|" cat"]).
lists:append([66|["ad"|[108|"y "]]],["cat"|dot]).
lists:concat([doc, '/', file, '.', 3]).
lists:duplicate(5, xx). 
begin lists:flatmap(fun(X)->[X,X] end, [a,b,c]) end.
begin lists:foldl(fun(X, Sum) -> X + Sum end, 0, [1,2,3,4,5]) end.
begin lists:foldl(fun(X, Prod) -> X * Prod end, 1, [1,2,3,4,5]) end.
begin lists:keymap(fun(Atom) -> atom_to_list(Atom) end, 2, [{name,jane,22},{name,lizzie,20},{name,lydia,15}]) end.
% my addition
begin lists:keymap(fun(Age) -> {age,Age} end, 3, [{name,jane,22},{name,lizzie,20},{name,lydia,15}]) end.
begin lists:mapfoldl(fun(X, Sum) -> {2*X, X+Sum} end,  0, [1,2,3,4,5]) end.
lists:nth(3, [a, b, c, d, e]).
lists:nthtail(3, [a, b, c, d, e]).
begin tl(tl(tl([a, b, c, d, e]))) end.
lists:nthtail(0, [a, b, c, d, e]).
lists:nthtail(5, [a, b, c, d, e]).
begin lists:partition(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]) end.
begin lists:partition(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e]) end.
lists:reverse([1, 2, 3, 4], [a, b, c]).
lists:seq(1, 10).
lists:seq(1, 20, 3).
lists:seq(1, 0, 1).
lists:seq(10, 6, 4).
lists:seq(1, 1, 0).
begin lists:splitwith(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]) end.
begin lists:splitwith(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e]) end.
lists:sublist([1,2,3,4], 2, 2).
lists:sublist([1,2,3,4], 2, 5).
lists:sublist([1,2,3,4], 5, 2).
lists:subtract("123212", "212").
begin lists:zipwith(fun(X, Y) -> X+Y end, [1,2,3], [4,5,6]) end.
begin lists:zipwith3(fun(X, Y, Z) -> X+Y+Z end, [1,2,3], [4,5,6], [7,8,9]) end.
begin lists:zipwith3(fun(X, Y, Z) -> [X,Y,Z] end, [a,b,c], [x,y,z], [1,2,3]) end.

% end of examples from lists manual

% math
math:sin(1.0).
math:sin(3.14).
math:sin(-34.14).
math:sin(0).
math:sin(10).
math:sin(0.0).
math:sin(0.01).

math:cos(1.0).
math:cos(3.14).
math:cos(-34.14).
math:cos(0).
math:cos(10).
math:cos(0.0).
math:cos(0.01).

% proplists
proplists:lookup(ala,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:lookup(kasia,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:lookup(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:delete(ala,[{ala,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:delete(kasia,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:delete(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_value(ala,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_value(kasia,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_value(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_value(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}],something).
proplists:is_defined(ala,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:is_defined(kasia,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:is_defined(john,[{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
proplists:get_keys([{ala,12},{ola,613},{ewa,661},{kasia,551},{basia,41}]).
% TODO:  more tests

% more lists
lists:max([2]).
lists:min([2]).
lists:max([2,4]).
lists:min([2,4]).
lists:max([2,4,7]).
lists:min([2,4,7]).
lists:max([2,4,1]).
lists:min([2,4,1]).
lists:max([2,4,1,7]).
lists:min([2,4,1,7]).
lists:max([9,4,1,7]).
lists:min([9,4,1,7]).
lists:max([9,14,1,7]).
lists:min([9,14,1,7]).
lists:sum([]).
lists:sum([1,2]).
lists:sum([1,3]).
lists:sum([0.4,9.99,3.14]).
lists:sum([1,33,412]).
lists:sum([1,3,6,401,-5,12,41,-12]).
lists:sum([1,3.5,6,8.5,11,13.3,16,18.5,21.3,23.51,26,28.5,31,33.5,36,38.5,41,43.5,46,48.5,51,53.5,56,58.5,61,63.5,66376,378.5,381,383.5,386,388.5,391,393.5,396,398.5,401]).
lists:last([8]).
lists:last([9,2]).
lists:last([a,b,c]).
lists:zip([],[]).
lists:zip([1],[a]).
lists:zip([a,b,d],[a,b,c]).
lists:zip([a,b,d],[4,6,7]).
lists:zip3([],[],[]).
lists:zip3([a],[5],[{z,p}]).
lists:zip3([a,7],[5,a8],[{z,p},{-5,f}]).
lists:unzip([]).
lists:unzip([{a,b},{5,6}]).
lists:unzip([{a,900},{c,11}]).
lists:unzip([{a,900},{c,11},{d,5}]).
lists:unzip3([]).
lists:unzip3([{a,2,c}]).
lists:unzip3([{a,2,c},{6,i,q},{6,i,q}]).
lists:sort([]).
lists:sort([1,7,1,8,9,12,8,9,23,4]).
lists:sort([3]).
lists:sort([3,5]).
lists:sort([5,3]).
lists:sort([3,3]).
lists:sort([3,3,1]).
lists:sort([3,1,3]).
lists:sort([1,3,3]).
lists:sort([1,3,3,6,1,2,3,1,56,12,62,3423,4,7,213,24,6,7,2,4,7,8,65,3,5,6,89,8765,43,23,12,4,1,4,3,2,2,4,5,6,7,5,4,3,5,65,6,7,4,3,2,4,65,7,9,0,9,7,5,3,2,12,4]).

gb_trees:empty().
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T) end.
begin T=gb_trees:empty(), T2=gb_trees:insert(ala,123,T) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), gb_trees:lookup(ala,T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), T3=gb_trees:update(ala,555,T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), gb_trees:is_defined(ala,T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), gb_trees:get(ala,T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), T3=gb_trees:delete(ala,T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), T3=gb_trees:delete_any(ala,T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), T3=gb_trees:delete_any(xxx,T2) end.
% balance/1 should be used only after massive deletes, without further insertions.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), T3=gb_trees:balance(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), gb_trees:is_empty(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), I=gb_trees:iterator(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), gb_trees:take_largest(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), gb_trees:take_smallest(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), gb_trees:smallest(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), gb_trees:largest(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), gb_trees:size(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), L=gb_trees:keys(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), L=gb_trees:values(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:enter(ala,123,T), L=gb_trees:to_list(T2) end.
% map/2, next/1
begin T=gb_trees:empty(), T2=gb_trees:from_orddict([{ala,123},{basia,123},{ela,512},{gosia,612},{jola,71},{kasia,123},{ola,21}]) end.
begin T=gb_trees:empty(), T2=gb_trees:from_orddict([{ala,123},{basia,123},{ela,512},{gosia,612},{jola,71},{kasia,123},{ola,21}]), L=gb_trees:keys(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:from_orddict([{ala,123},{basia,123},{ela,512},{gosia,612},{jola,71},{kasia,123},{ola,21}]), L=gb_trees:to_list(T2) end.
begin T=gb_trees:empty(), T2=gb_trees:from_orddict([{ala,123},{basia,123},{ela,512},{gosia,612},{jola,71},{kasia,123},{ola,21}]), T3=gb_trees:delete(kasia,T2) end.
begin T=gb_trees:empty(), T2=gb_trees:from_orddict([{ala,123},{basia,123},{ela,512},{gosia,612},{jola,71},{kasia,123},{ola,21}]), T3=gb_trees:delete(kasia,T2), TR=gb_trees:delete(jola,T3) end.

regexp:parse("joe").
regexp:parse("(ala|adam|ewa|kasia|ewelina)").
regexp:parse("(jo)?anna").
regexp:parse("[a-z][0-9a-zA-Z_]*").
regexp:parse("[A-Z_][0-9a-zA-Z_]*").
regexp:parse("^([a-z][0-9a-zA-Z_]*|[A-Z_][0-9a-zA-Z_]*)").
regexp:parse("(\\+|-)?[0-9]+\\.[0-9]+((E|e)(\\+|-)?[0-9]+)?").
begin {ok,P} = regexp:parse("(jo)?an+a"), {regexp:match("joanna", P), regexp:match("joe", P), regexp:match("anna", P), regexp:match("joannnnna", P)} end.
begin {ok,P} = regexp:parse("an+a"), regexp:matches("joanna dala janowia jana, a anna miela manna w wannach", P) end.

